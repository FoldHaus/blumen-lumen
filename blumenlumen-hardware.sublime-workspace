{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"LED",
				"LED_TOGGLE"
			],
			[
				"is",
				"isPushed"
			],
			[
				"Neo",
				"NeopixelMap"
			],
			[
				"U",
				"uint8_t"
			],
			[
				"NEO",
				"NeopixelMap"
			],
			[
				"duty",
				"dutyPausing"
			],
			[
				"laser",
				"lasers"
			],
			[
				"on",
				"onStartTime"
			],
			[
				"time",
				"timeToPause"
			],
			[
				"open",
				"openFlower"
			],
			[
				"set",
				"setRGB"
			],
			[
				"LED_",
				"LED_B"
			],
			[
				"uin",
				"uint8_t"
			],
			[
				"g",
				"g"
			],
			[
				"ultr",
				"ultrasonicThreshold"
			],
			[
				"PIR",
				"PIR_SIG"
			],
			[
				"MOT",
				"MOT_IN_2"
			],
			[
				"pin",
				"pinMode"
			],
			[
				"Mot",
				"MOTOR_IN_1"
			],
			[
				"MOVE",
				"MOVE_BLOCK2"
			],
			[
				"FULL",
				"FULL_OFF"
			],
			[
				"FULL_",
				"FULL_OFF"
			],
			[
				"LED_CONNEC",
				"LED_CONNECTED"
			],
			[
				"LED_RUNNING_",
				"LED_RUNNING_ACTIVE"
			],
			[
				"b",
				"bIncrement"
			],
			[
				"getCRU",
				"getCurrentRGB"
			],
			[
				"swit",
				"switchLED"
			],
			[
				"POL",
				"POLL_END_BYTE"
			],
			[
				"un",
				"unsigned"
			],
			[
				"pass",
				"passMessageViaDefault"
			],
			[
				"passMessage",
				"passMessageViaDefault"
			],
			[
				"to",
				"toStartTimer"
			],
			[
				"comman",
				"commandMsg"
			],
			[
				"POLL",
				"POLL_IF"
			],
			[
				"poll",
				"pollType"
			],
			[
				"if",
				"IfBlockOpen"
			],
			[
				"LEDB",
				"LED_DEBUGGING_ACTIVE"
			],
			[
				"get",
				"getSinusoidalIncrement"
			],
			[
				"IF_CLOSE_",
				"IF_CLOSE_MASTER"
			],
			[
				"inc",
				"incomingByte2"
			],
			[
				"soft",
				"softSerial"
			],
			[
				"send",
				"sendPollResponseViaDefault"
			],
			[
				"comma",
				"commandMsg"
			],
			[
				"n",
				"nCounts"
			],
			[
				"alt",
				"altSerial"
			],
			[
				"expe",
				"expectingAnRx"
			],
			[
				"up",
				"updateMsg"
			],
			[
				"default",
				"defaultPort"
			],
			[
				"CMD_",
				"CMD_LENGTH"
			],
			[
				"message",
				"messageRead"
			],
			[
				"mess",
				"messageRead"
			],
			[
				"messa",
				"messageRead"
			],
			[
				"in",
				"inByte"
			],
			[
				"defa",
				"defaultOut"
			],
			[
				"de",
				"defaultOut"
			],
			[
				"read",
				"readUpstream"
			],
			[
				"def",
				"defaultSoftSerial"
			],
			[
				"messag",
				"messageIndex"
			],
			[
				"comm",
				"command"
			],
			[
				"index",
				"indexOf"
			],
			[
				"LED_CO",
				"LED_CONNECTING"
			],
			[
				"setDim",
				"setDimCyan"
			],
			[
				"fade",
				"fadeIntoSolidColor"
			],
			[
				"commandM",
				"commandMsgInt"
			],
			[
				"command",
				"commandMsgInt"
			],
			[
				"input",
				"inputLine"
			],
			[
				"new",
				"new_r"
			],
			[
				"animat",
				"animationDelayTime"
			],
			[
				"aniom",
				"animationDelayTime"
			],
			[
				"r",
				"rIncrement"
			],
			[
				"block",
				"blockStackLengh"
			],
			[
				"upd",
				"updateBlockState"
			],
			[
				"M",
				"MAX_PING_TIME"
			],
			[
				"isEnd",
				"isEnd_lastTime"
			],
			[
				"blockStack",
				"blockStackIndex"
			],
			[
				"crea",
				"createArray"
			],
			[
				"a",
				"aJson"
			],
			[
				"blockSt",
				"blockStackIndex"
			],
			[
				"BLOCK",
				"BLOCK_STACK_RX_LEN"
			],
			[
				"block_",
				"block_state_false"
			],
			[
				"com",
				"commandMsg"
			],
			[
				"init",
				"initBaudRate"
			],
			[
				"_",
				"_greenPin"
			],
			[
				"IS",
				"IS_COMPILE"
			],
			[
				"port",
				"portOut"
			],
			[
				"comput",
				"computedCheckSum"
			],
			[
				"gener",
				"generateChecksum"
			],
			[
				"u",
				"uint8_t"
			],
			[
				"IS_",
				"IS_COMPILE"
			],
			[
				"Digital",
				"digitalWrite"
			],
			[
				"ack",
				"ackReceived"
			],
			[
				"CMD",
				"CMD_LENGTH"
			],
			[
				"measure",
				"measureSpeed"
			],
			[
				"incomi",
				"incomingByte"
			],
			[
				"dec",
				"decreaseStripeSpeed"
			],
			[
				"increas",
				"increaseStripeSpeed"
			],
			[
				"str",
				"strong"
			],
			[
				"max",
				"max-height"
			],
			[
				"border",
				"border"
			],
			[
				"min",
				"min-height"
			],
			[
				"font",
				"font-size"
			],
			[
				"padding",
				"padding"
			],
			[
				"dist",
				"distanceToGo"
			],
			[
				"dis",
				"distanceToGo"
			],
			[
				"curr",
				"currPos"
			],
			[
				"cur",
				"currPos"
			],
			[
				"linear",
				"linearSpeed"
			],
			[
				"Ste",
				"STEPS_PER_REV"
			],
			[
				"THI",
				"WIRE_THICKNESS"
			],
			[
				"SOUND",
				"SOUND_ENABLE"
			],
			[
				"i2",
				"I2C_ADDR"
			],
			[
				"begin",
				"beginTransmission"
			],
			[
				"I2",
				"I2C_ADDR"
			],
			[
				"sound",
				"soundFlag"
			],
			[
				"digi",
				"digitalRead"
			],
			[
				"digit",
				"digitalRead"
			],
			[
				"di",
				"digitalRead"
			],
			[
				"capBuff",
				"capBuffer"
			],
			[
				"capBuf",
				"capBuffer"
			],
			[
				"capBu",
				"capBuffer"
			],
			[
				"CAP",
				"CAP_BUFFER_SIZE"
			],
			[
				"VA",
				"VALUE_RISE_FOR_TOUCH"
			],
			[
				"capV",
				"capValFloat"
			],
			[
				"last",
				"lastTime"
			],
			[
				"capVal",
				"capValFloat"
			],
			[
				"change",
				"changeWeaponLED"
			],
			[
				"N",
				"N_LEDS_RING"
			],
			[
				"MOD",
				"MODULE_ONE"
			]
		]
	},
	"buffers":
	[
		{
			"file": "flower/flower.ino",
			"settings":
			{
				"buffer_size": 3183,
				"line_ending": "Unix"
			}
		},
		{
			"file": "flower/Sensors.cpp",
			"settings":
			{
				"buffer_size": 762,
				"line_ending": "Unix"
			}
		},
		{
			"file": "flower/Lasers.cpp",
			"settings":
			{
				"buffer_size": 872,
				"line_ending": "Unix"
			}
		},
		{
			"file": "flower/LEDs.cpp",
			"settings":
			{
				"buffer_size": 3525,
				"line_ending": "Unix"
			}
		},
		{
			"file": "flower/Radio.cpp",
			"settings":
			{
				"buffer_size": 145,
				"line_ending": "Unix"
			}
		},
		{
			"file": "flower/Motor.cpp",
			"settings":
			{
				"buffer_size": 1928,
				"line_ending": "Unix",
				"name": "moto"
			}
		},
		{
			"file": "tests/ComputerControl/ComputerControl.ino",
			"settings":
			{
				"buffer_size": 5843,
				"line_ending": "Unix"
			}
		},
		{
			"file": "controller/controller.ino",
			"settings":
			{
				"buffer_size": 738,
				"line_ending": "Unix"
			}
		},
		{
			"file": "controller/HMI.cpp",
			"settings":
			{
				"buffer_size": 2844,
				"line_ending": "Unix"
			}
		},
		{
			"file": "controller/NeopixelMap.cpp",
			"settings":
			{
				"buffer_size": 319,
				"line_ending": "Unix"
			}
		},
		{
			"file": "controller/EnvSensors.cpp",
			"settings":
			{
				"buffer_size": 976,
				"line_ending": "Unix"
			}
		},
		{
			"file": "flower/FlowerConstants.h",
			"settings":
			{
				"buffer_size": 1066,
				"line_ending": "Unix"
			}
		},
		{
			"file": "flower/Sensors.h",
			"settings":
			{
				"buffer_size": 404,
				"line_ending": "Unix"
			}
		},
		{
			"file": "flower/Lasers.h",
			"settings":
			{
				"buffer_size": 548,
				"line_ending": "Unix"
			}
		},
		{
			"file": "flower/LEDs.h",
			"settings":
			{
				"buffer_size": 802,
				"line_ending": "Unix"
			}
		},
		{
			"file": "flower/Radio.h",
			"settings":
			{
				"buffer_size": 438,
				"line_ending": "Unix"
			}
		},
		{
			"file": "flower/Motor.h",
			"settings":
			{
				"buffer_size": 710,
				"line_ending": "Unix"
			}
		},
		{
			"file": "controller/MasterConstants.h",
			"settings":
			{
				"buffer_size": 1325,
				"line_ending": "Unix"
			}
		},
		{
			"file": "controller/HMI.h",
			"settings":
			{
				"buffer_size": 308,
				"line_ending": "Unix"
			}
		},
		{
			"file": "controller/NeopixelMap.h",
			"settings":
			{
				"buffer_size": 249,
				"line_ending": "Unix"
			}
		},
		{
			"file": "controller/EnvSensors.h",
			"settings":
			{
				"buffer_size": 525,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/ArduinoUpload/ArduinoUpload.sublime-build",
	"command_palette":
	{
		"height": 87.0,
		"selected_items":
		[
			[
				"hori",
				"Snippet: Arduino horizontal separator"
			],
			[
				"ardu",
				"Snippet: Arduino horizontal separator"
			],
			[
				"ard",
				"Snippet: Arduino boiler plate"
			],
			[
				"ardui",
				"Snippet: Diagram for Arduino Pro Mini"
			],
			[
				"css",
				"Set Syntax: CSS"
			],
			[
				"scs",
				"Set Syntax: SCSS"
			],
			[
				"c++",
				"Set Syntax: C++"
			],
			[
				"linter",
				"SublimeLinter: Disable Linting"
			],
			[
				"java",
				"Set Syntax: JavaScript"
			],
			[
				"sass",
				"Set Syntax: Sass"
			],
			[
				"packg",
				"Package Control: Disable Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"pytho",
				"Set Syntax: Python"
			],
			[
				"package",
				"Package Control: List Packages"
			],
			[
				"arduino",
				"Stino: Select Arduino Folder..."
			],
			[
				"",
				"Build: Build"
			],
			[
				"stino",
				"Stino: New Sketch..."
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"packa",
				"Package Control: List Packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"horiz",
				"Snippet: Arduino horizontal separator"
			],
			[
				"proc",
				"Set Syntax: Processing"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"git",
				"Git: Status"
			],
			[
				"git ad",
				"Git: Add Current File"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"ardi",
				"Set Syntax: Arduino"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"align",
				"Preferences: Alignment Key Bindings â€“ Default"
			],
			[
				"con",
				"Package Control: Remove Package"
			],
			[
				"set ht",
				"Set Syntax: HTML"
			],
			[
				"print",
				"Snippet: Arduino println"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"re",
				"Indentation: Reindent Lines"
			],
			[
				"inde",
				"Indentation: Reindent Lines"
			],
			[
				"ind",
				"Indentation: Reindent Lines"
			],
			[
				"snippp	",
				"Snippet: Arduino print"
			],
			[
				"alig",
				"Preferences: Alignment Key Bindings â€“ Default"
			],
			[
				"ar",
				"Set Syntax: Arduino"
			],
			[
				"snip",
				"Snippet: ArduinoSetup"
			],
			[
				"setup",
				"Snippet: setup"
			],
			[
				"snippet: ",
				"Snippet: loop"
			],
			[
				"bui",
				"Build: Build"
			],
			[
				"build",
				"Build: Build"
			],
			[
				"snipp",
				"Snippet: For Loop"
			],
			[
				"process",
				"Set Syntax: Processing"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git quick",
				"Git: Quick Commit"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add Current File"
			],
			[
				"git pul",
				"Git: Pull"
			],
			[
				"pacak",
				"Package Control: Install Package"
			],
			[
				"package ins",
				"Package Control: Install Package"
			],
			[
				"contro",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"C++",
				"Set Syntax: C++"
			],
			[
				"if",
				"Snippet: If Condition"
			],
			[
				"set syntax C++",
				"Set Syntax: C++"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 125.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/jchion/Downloads/Anemometer_v1_0/Anemometer_v1_0.ino",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/blumenlumen-hardware/flower/flower.ino",
		"/Users/jchion/Dropbox (ideo.com)/Fence_Fence_Revolution/02 design prototypes/code/ffr_final/ffr_final.ino",
		"/Users/jchion/Dropbox (ideo.com)/Fence_Fence_Revolution/02 design prototypes/code/ffr_final/animations.ino",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/blumenlumen-hardware/flower/LEDs.cpp",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/blumenlumen-hardware/controller/remoteControl.ino",
		"/Users/jchion/Documents/Arduino/libraries/Adafruit_NeoPixel/examples/strandtest/strandtest.pde",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/blumenlumen-hardware/tests/laserdebug/laserdebug.ino",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/blumenlumen-hardware/tests/laserdebug.ino",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/blumenlumen-hardware/flower/Lasers.cpp",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/blumenlumen-hardware/flower/Motor.h",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/blumenlumen-hardware/flower/Radio.h",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/blumenlumen-hardware/flower/LED-animations.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/Kubo.sublime-project",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/MoveBlock2.cpp",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/blumenlumen-hardware/flower/laser-animations.h",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/blumenlumen-hardware/tests/ComputerControl/ComputerControl.ino",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/controller/controller.ino",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/flower/flower.ino",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/LEDTest/LEDTest.ino",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/ComputerControl/ComputerControl.ino",
		"/Users/jchion/Dropbox (ideo.com)/Burningman-Flowers/Arduino/MotorTest/MotorTest.ino",
		"/Users/jchion/Documents/Arduino/libraries/RF24/examples/GettingStarted/GettingStarted.pde",
		"/Users/jchion/Documents/side projects/web/type-experiments/js/index.js",
		"/Users/jchion/Documents/side projects/web/portfoliosite/static/sass/jenga-line-illusion.scss",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/MoveBlock2.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/IfBlockCloserMaster.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/IfBlockCloserMaster.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/IfBlockOpen.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/MoveBlockTester.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/MoveBlockTester.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/MoveBlock.cpp",
		"/Users/jchion/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/TurnBlock.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/TurnBlock.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/Kubo.ino",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/CompileBlock.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/RepeatBlockOpen.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/KuboAnimations.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/KuboAnimations.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/RepeatBlockOpen.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/MoveBlock.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/IfBlockSlave/IfBlockSlave.ino",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/IfBlockOpen.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/CompileTesterBlock.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/IfBlockCloserSlave/IfBlockCloserSlave.ino",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/CompileBlock.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/i2ctest/SlaveB/SlaveB.ino",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/IfBlockCloserSlave.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/IfBlockCloserSlave.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/CompileTesterBlock.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/BloxConstants.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/LED_tuner/LED_tuner.ino",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/SpecialBlock.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/DummyBlock.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/SpecialBlock.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/DummyBlock.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/RepeatBlockOpenTester.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/RepeatBlockOpenTester.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/RepeatBlockCloser.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/IfBlockCloser.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/IfBlockCloser.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/RepeatBlockCloser.h",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/IfBlock.cpp",
		"/Users/jchion/Documents/projects/Kubits/kubo-hardware/Arduino/Kubo/IfBlock.h",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Kubo/KuboBlock.cpp",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Kubo/IfBlock.h",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Kubo/IfBlock.cpp",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Kubo/KuboBlock.h",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/KuboBlock/BloxConstants.h",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/KuboBlock/CompileBlock.h",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/KuboBlock/CompileBlock.cpp",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/KuboBlock/Kubo.ino",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/KuboBlock/KuboBlock.cpp",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/KuboBlock/KuboAnimations.cpp",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/KuboBlock/KuboBlock.h",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Kubo/KuboAnimations.cpp",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/KuboBlock/KuboAnimations.h",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Generalized_Block_code/KuboAnimations.h",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Generalized_Block_code/KuboAnimations.cpp",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Generalized_Block_code/CompileBlock.h",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Generalized_Block_code/CompileBlock.cpp",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Generalized_Block_code/KuboBlock.cpp",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Generalized_Block_code/KuboBlock.h",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Generalized_Block_code/KuboBlock.ino",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/bluetoothExp/bluetoothExp.ino",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Generalized_Block_code/debuggingcharbyte.txt",
		"/Users/jchion/Documents/Arduino/libraries/SoftwareSerial/SoftwareSerial.cpp",
		"/Users/jchion/Documents/Arduino/libraries/SoftwareSerial/SoftwareSerial.h",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Generalized_Block_code/BloxAnimations.ino",
		"/Users/jchion/Documents/projects/kubo-hardware/Arduino/Generalized_Block_code/BloxDebugFunctions.ino",
		"/Users/jchion/Google Drive/Arduino Code copy 2/Kubo_Blox_C_Condition_Start/Kubo_Blox_C_Condition_Start.ino",
		"/Users/jchion/Downloads/app/config.rb",
		"/Users/jchion/Downloads/app/scss/_modules.scss",
		"/Users/jchion/Downloads/app/scss/_states.scss",
		"/Users/jchion/Downloads/app/scss/styles.scss",
		"/Users/jchion/Desktop/msi.txt",
		"/Users/jchion/Downloads/app/scss/_layout.scss",
		"/Users/jchion/Documents/side projects/web/portfoliosite/static/js/ps.js",
		"/Users/jchion/Documents/side projects/web/portfoliosite/templates/nav.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/pages/musicposters.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/pages/eggshells.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/static/js/index.js",
		"/Users/jchion/Documents/side projects/web/portfoliosite/templates/base.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/pages/onesqonecircle.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/pages/index.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/pages/dizzytype.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/pages/randomsubtlepatterns.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/pages/typewriterprinter.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/templates/footer.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/pages/rotatingillusion.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/pages/typeexperiments.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/pages/hello.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/pages/lightchimes.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/pages/cubes.html",
		"/Users/jchion/Documents/side projects/web/portfoliosite/js/index.js",
		"/Users/jchion/Documents/side projects/web/portfoliosite/sass/type-experiments-style.scss",
		"/Users/jchion/Documents/side projects/web/portfoliosite/js/ps.js",
		"/Users/jchion/Documents/side projects/web/portfoliosite/js/type-experiments.js",
		"/Users/jchion/Documents/side projects/web/portfoliosite/typeexperiments.php",
		"/Users/jchion/Documents/side projects/web/portfoliosite/rotatingillusion.php",
		"/Users/jchion/Documents/side projects/web/portfoliosite/sass/screen.scss",
		"/Users/jchion/Documents/side projects/web/portfolio/rotatingillusion.php",
		"/Users/jchion/Documents/side projects/web/portfolio/onesqonecircle.php",
		"/Users/jchion/Documents/side projects/web/portfolio/musicposters.php",
		"/Users/jchion/Documents/side projects/web/portfolio/lightchimes.php",
		"/Users/jchion/Documents/side projects/web/portfolio/hello.php",
		"/Users/jchion/Documents/side projects/web/portfolio/dizzytype.php"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"();\n",
			"=",
			"const",
			"Released",
			"bool",
			"get",
			"Threshold",
			"()",
			"void",
			"bool",
			"EnvSensors",
			"Radios",
			"EnvSensors",
			"HMI",
			"LEDs",
			"Lasers",
			"radio",
			"`",
			"pin",
			"PIN",
			"pin",
			"4",
			"update",
			"p",
			"uint8_t",
			"4",
			"i",
			"i ",
			"setRGB",
			"this",
			"i",
			"endIntensity",
			"startIntensity",
			"i",
			"return",
			"strip.Color(",
			"WheelPos",
			"digitalWrite",
			"Lasers",
			"LEDs",
			"lasers",
			"leds",
			"radio",
			"motor",
			"radio",
			"leds",
			"motor",
			"radio",
			"lasers",
			"lasersUpdate",
			"IN_2",
			"MoveBlock",
			"DummyBlock",
			"Move2Block",
			"TurnBlock",
			"Move2Block",
			"TurnBlock",
			"SpecialBlock",
			"pausePolling",
			"parse",
			"currAnimation",
			"uint8_t",
			"LED_CONNECTING",
			"red",
			"setRed",
			"LED_ERROR",
			"Serial",
			"prevAnimation",
			"			prevAnimation = currAnimation;",
			"			prevAnimation = currAnimation; //-- special case because on start up\n",
			"switchLED",
			"currAnimation",
			"prevAnimation",
			"currAnimation",
			"isHueChange",
			"animations",
			"switch",
			"false",
			"shouldFadeOutThenIn",
			"	_r = getCurrentRed();\n	_g = getCurrentGreen();	\n	_b = getCurrentBlue();",
			"LED_CONNECTED",
			"			prevAnimation = currAnimation;\n",
			"LED",
			"startStopTimer",
			"readDownstream",
			"DEBUG_LED",
			"readDownstream",
			"animations.setBrightGreen",
			"startStopTimer",
			"sendPollResponse",
			"sendPoll",
			"pollType",
			"this->",
			"_isTerminalBlock",
			"toStartTimer",
			"startStopTimer",
			"fullQuery",
			"queryStack",
			"pausePolling",
			"_sendResponsePoll",
			"=",
			"runLEDan",
			"animations",
			"255",
			"200",
			"255",
			"0",
			"200",
			"255",
			"= _",
			"- 1",
			">",
			"Factor",
			"r",
			"updateProcessed",
			"updateMsg",
			"updateIndex",
			"insideUpdate",
			"incomingByte",
			"defaultPort",
			"	defaultPort.flush();\n	delay(2);",
			"ifPort",
			"	ifPort.flush();\n	delay(2);",
			"softSerial",
			"inByte",
			"IfBlockCloser",
			"delay",
			"while"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"mySerial",
			"bool"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "flower/flower.ino",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3183,
						"regions":
						{
						},
						"selection":
						[
							[
								1362,
								1362
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Cache/User/Arduino/Syntaxes/Arduino.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 587.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "flower/Sensors.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 762,
						"regions":
						{
						},
						"selection":
						[
							[
								756,
								756
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "flower/Lasers.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 872,
						"regions":
						{
						},
						"selection":
						[
							[
								147,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "flower/LEDs.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3525,
						"regions":
						{
						},
						"selection":
						[
							[
								464,
								476
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "flower/Radio.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 145,
						"regions":
						{
						},
						"selection":
						[
							[
								143,
								143
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "flower/Motor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1928,
						"regions":
						{
						},
						"selection":
						[
							[
								1270,
								1270
							]
						],
						"settings":
						{
							"auto_name": "moto",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "tests/ComputerControl/ComputerControl.ino",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5843,
						"regions":
						{
						},
						"selection":
						[
							[
								2426,
								2426
							]
						],
						"settings":
						{
							"syntax": "Cache/User/Arduino/Syntaxes/Arduino.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 1.0,
						"translation.y": 1364.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 7,
					"file": "controller/controller.ino",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 738,
						"regions":
						{
						},
						"selection":
						[
							[
								206,
								206
							]
						],
						"settings":
						{
							"syntax": "Cache/User/Arduino/Syntaxes/Arduino.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 105.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "controller/HMI.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2844,
						"regions":
						{
						},
						"selection":
						[
							[
								344,
								344
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "controller/NeopixelMap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 319,
						"regions":
						{
						},
						"selection":
						[
							[
								170,
								170
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "controller/EnvSensors.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 976,
						"regions":
						{
						},
						"selection":
						[
							[
								721,
								721
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 11,
					"file": "flower/FlowerConstants.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1066,
						"regions":
						{
						},
						"selection":
						[
							[
								979,
								979
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "flower/Sensors.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 404,
						"regions":
						{
						},
						"selection":
						[
							[
								160,
								160
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "flower/Lasers.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 548,
						"regions":
						{
						},
						"selection":
						[
							[
								81,
								81
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "flower/LEDs.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 802,
						"regions":
						{
						},
						"selection":
						[
							[
								231,
								231
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "flower/Radio.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 438,
						"regions":
						{
						},
						"selection":
						[
							[
								212,
								212
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "flower/Motor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 710,
						"regions":
						{
						},
						"selection":
						[
							[
								468,
								468
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 37.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 17,
					"file": "controller/MasterConstants.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1325,
						"regions":
						{
						},
						"selection":
						[
							[
								1236,
								1236
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "controller/HMI.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 308,
						"regions":
						{
						},
						"selection":
						[
							[
								200,
								200
							],
							[
								228,
								228
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "controller/NeopixelMap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 249,
						"regions":
						{
						},
						"selection":
						[
							[
								235,
								235
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "controller/EnvSensors.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 525,
						"regions":
						{
						},
						"selection":
						[
							[
								375,
								375
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 12.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				0,
				1,
				1,
				2
			],
			[
				1,
				1,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.496939116076,
			1.0
		],
		"rows":
		[
			0.0,
			0.538301955913,
			1.0
		]
	},
	"menu_visible": true,
	"output.arduino_panel":
	{
		"height": 100.0
	},
	"output.exec":
	{
		"height": 73.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"project": "blumenlumen-hardware.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				".cpp",
				"/Users/jchion/Documents/Arduino/libraries/BLEcontroller/BLEcontroller.cpp"
			],
			[
				"ble",
				"/Users/jchion/Documents/Arduino/libraries/BLEcontroller/BLEcontroller.cpp"
			],
			[
				"",
				"/Users/jchion/Documents/Arduino/libraries/BLEcontroller/BLEcontroller.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 308.0,
		"selected_items":
		[
		],
		"width": 334.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 141.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
